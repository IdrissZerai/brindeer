openapi: 3.0.0
info:
  title: Tindeer API
  description: Notre super API pour notre application mobile de rencontre de Rennes
  version: 1.0.0
servers:
  - url: http://localhost:9080/api/v1
    description: Environnement de test Docker
  - url: http://localhost:9090/api/v1
    description: Environnement de test local
components:
  securitySchemes:
    oAuthSample:    # <---- arbitrary name
      type: oauth2
      description: This API uses OAuth 2 with the implicit grant flow. [More info](https://api.example.com/docs/auth)
      flows:
        authorizationCode:   # <---- OAuth flow(authorizationCode, implicit, password or clientCredentials)
          authorizationUrl: http://localhost:8080/auth/realms/tindeer/protocol/openid-connect/auth
          tokenUrl: http://localhost:8080/auth/realms/tindeer/protocol/openid-connect/token
          scopes:
            profile: access profile
            email: access email
  
  schemas:
    Profiles:
      type: array
      items:
        $ref: "#/components/schemas/Profile"
    Profile:
      type: object
      required:
        - email
      properties:
        id:
          type: integer
          format: int64
        userId:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        address:
          type: string
        email:
          type: string
        sexe:
          type: string
        age:
          type: integer
          format: int32
        created:
          type: string
          format: date
        modified:
          type: string
          format: date
    Location:
        type: object
        required:
          - email
       properties:
                name:
                  description: Username
                  type: string
                email:
                  description: Email of the user
                  type: string
                address:
                  description: 
                  type: integer
security: 
  - oAuthSample: 
    - profile
    - email
paths:
/profiles/{id}:
    put:
     tags:
      - "profile"
      summary: "Update profile"
      description: "This can only be done by the logged in user."
      operationId: "updateProfile"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Updated profile object"
        required: true
      responses:
        "400":
          description: "Invalid profile "
        "404":
          description: "profile not found"
    get:
      tags:
      - "profile"
      summary: "Returns a profile"
      description: ""
      operationId: "getprofile"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "profileId"
        in: "path"
        description: "profile id to retrieve"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Profile not found"

/matchs/location:
    post:
      summary: update the location of the user by email 
      tags:
        - matchs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Location"
      responses:
        '200':
          description: localisation updated.
          content:
            'application/json': { }
          '405':
            description: Method Not Allowed
            content:
              'application/json': { }

 /matchs/findByLongitudeLatitudeDistance:
    parameters:
      - name: longitude
        in: query
        required: true
        description: longitude of profiles 
        schema:
          type: integer
      - name: latitude
          in: query
          required: true
          description: latitude of profiles
          schema:
            type: integer
      - name: distance
          in: query
          required: true
          description: the distance between matchs
          schema:
            type: integer
    get:
      description: Get all profiles match with query parameters
        tags:
          - matchs
        operationId: findByDistance
        responses:
          '200':
            description: profile's match
            headers:
              x-next:
                description: A link to the next page of responses
                schema:
                  type: string
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Profiles"

